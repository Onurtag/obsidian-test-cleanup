/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
var __export = (target, all) => {
  __markAsModule(target);
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __reExport = (target, module2, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });
  }
  return target;
};
var __toModule = (module2) => {
  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);
};
var __async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};

// main.ts
__export(exports, {
  default: () => MyPlugin
});
var import_obsidian = __toModule(require("obsidian"));
var MyPlugin = class extends import_obsidian.Plugin {
  onload() {
    return __async(this, null, function* () {
      console.log("-----LOAD-----");
      yield this.clearCaches();
      this.registerInterval(window.setInterval(() => __async(this, null, function* () {
        yield this.clearCaches();
      }), 2 * 1e3));
    });
  }
  onunload() {
    return __async(this, null, function* () {
      console.log("-----UNLOAD-----");
      yield this.clearCaches();
    });
  }
  clearCaches() {
    return __async(this, null, function* () {
      const dbs = yield window.indexedDB.databases();
      dbs.forEach((db) => {
        if (db.name.contains("cache")) {
          window.indexedDB.deleteDatabase(db.name);
          console.log("Cache deleted:", db.name);
        }
      });
    });
  }
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsibWFpbi50cyJdLAogICJzb3VyY2VzQ29udGVudCI6IFsiaW1wb3J0IHsgUGx1Z2luIH0gZnJvbSAnb2JzaWRpYW4nO1xyXG5cclxuLy8gUmVtZW1iZXIgdG8gcmVuYW1lIHRoZXNlIGNsYXNzZXMgYW5kIGludGVyZmFjZXMhXHJcblxyXG5pbnRlcmZhY2UgTXlQbHVnaW5TZXR0aW5ncyB7XHJcblx0bXlTZXR0aW5nOiBzdHJpbmc7XHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIE15UGx1Z2luIGV4dGVuZHMgUGx1Z2luIHtcclxuXHRzZXR0aW5nczogTXlQbHVnaW5TZXR0aW5ncztcclxuXHJcblx0YXN5bmMgb25sb2FkKCkge1xyXG5cdFx0Y29uc29sZS5sb2coXCItLS0tLUxPQUQtLS0tLVwiKTtcclxuXHJcblx0XHQvKipcclxuXHRcdCAqIC0tLSBQbHVnaW46IG9ic2lkaWFuLXRlc3QtY2xlYW51cC1jYWNoZSAtLS1cclxuXHRcdCAqIE9ic2lkaWFuIC1jYWNoZSBkYXRhYmFzZXMgbGVhayB5b3VyIHZhdWx0IGRhdGEgKHN1Y2ggYXMgdGFncywgaGVhZGluZ3MsIGxpc3RzLi4uKVxyXG5cdFx0ICogKFNlZTogaHR0cHM6Ly9mb3J1bS5vYnNpZGlhbi5tZC90L3NlY3VyaXR5LXZhdWx0LWNvbnRlbnRzLWV4cG9zZWQtb3V0c2lkZS10aGUtdmF1bHRzLWRpcmVjdG9yeS8yODg4NiApXHJcblx0XHQgKiBcclxuXHRcdCAqIFRoaXMgaXMgYW4gZXhwZXJpbWVudGFsIHBsdWdpbiB0aGF0IHRyaWVzIHRvIGNsZWFyIHRoYXQgY2FjaGUuXHJcblx0XHQgKiBUaGUgZ29hbDogY2FjaGUgc2hvdWxkIG5vdCBleGlzdCBhZnRlciBjbG9zaW5nIG9ic2lkaWFuLlxyXG5cdFx0ICogXHJcblx0XHQgKiBQLlM6IFRoaXMgZG9lcyBub3QgbWVhbiB0aGF0IG5vIGRhdGEgaXMgZ29pbmcgdG8gbGVhay4gVGhlcmUgbWlnaHQgYmUgbW9yZSBsZWFrZWQgZGF0YSBpbiBhIGRhdGFiYXNlIHNvbWV3aGVyZSBlbHNlLlxyXG5cdFx0ICogUC5QLlM6IEkgZG8gbm90IGtub3cgd2hhdCB0aGUgY2FjaGUgaXMgdXNlZCBmb3IuIEl0IG1pZ2h0IGp1c3QgYmUgdXNlZCBmb3IgYSBzaG9ydGVyIHN0YXJ0dXAgdGltZSBvciBtYXliZSBpdHMgdXNlZCBmb3Igc29tZXRoaW5nIG1vcmUgaW1wb3J0YW50LlxyXG5cdFx0ICogXHJcblx0XHQgKi9cclxuXHJcblx0XHQvL1RPRE86IG9wdGltaXplIG1ldGhvZCBvZiBjbGVhcmluZyB0aGUgY2FjaGUgKGRvaW5nIGl0IG9uY2Ugb24gbG9hZCBkb2Vzbid0IGN1dCBpdCkgXHJcblx0XHQvL2VpdGhlciBvYnNlcnZlIG9yIGxvZyB3aGVuIGl0cyBjcmVhdGVkIChvbiBsb2FkLCBvbiBmaWxlIGNyZWF0aW9uLCBvbiBkZWxldGlvbiBldGM/KSBhbmQgY2xlYXIgb25seSB3aGVuIG5lZWRlZC5cclxuXHRcdC8vT3IgY29ubmVjdCB0byBkYiBhbmQgY2hlY2sgZm9yIHRoZSB0YWJsZXMgKGVtcHR5IHRoZSBzdG9yZSkgYW5kIGNsZWFyIG9ubHkgaWYgdGhlcmVzIGFueSBkYXRhXHJcblx0XHRhd2FpdCB0aGlzLmNsZWFyQ2FjaGVzKCk7XHJcblxyXG5cdFx0dGhpcy5yZWdpc3RlckludGVydmFsKHdpbmRvdy5zZXRJbnRlcnZhbChhc3luYyAoKSA9PiB7XHJcblx0XHRcdC8vVGhpcyBtaWdodCBiZSBvdmVya2lsbCBpZiB0aGUgY2FjaGUgZG9lc24ndCBoYXZlIGFueSBkYXRhLlxyXG5cdFx0XHRhd2FpdCB0aGlzLmNsZWFyQ2FjaGVzKCk7XHJcblx0XHR9LCAyICogMTAwMCkpO1xyXG5cdH1cclxuXHJcblx0YXN5bmMgb251bmxvYWQoKSB7XHJcblx0XHRjb25zb2xlLmxvZyhcIi0tLS0tVU5MT0FELS0tLS1cIik7XHJcblx0XHRhd2FpdCB0aGlzLmNsZWFyQ2FjaGVzKCk7XHJcblx0fVxyXG5cclxuXHRhc3luYyBjbGVhckNhY2hlcygpIHtcclxuXHRcdGNvbnN0IGRicyA9IGF3YWl0IHdpbmRvdy5pbmRleGVkREIuZGF0YWJhc2VzKCk7XHJcblx0XHRkYnMuZm9yRWFjaChkYiA9PiB7XHJcblx0XHRcdC8vRGVsZXRlIGluZGV4ZWREQiBkYXRhYmFzZXMgd2l0aCBuYW1lcyB0aGF0IGNvbnRhaW4gXCJjYWNoZVwiXHJcblx0XHRcdGlmIChkYi5uYW1lLmNvbnRhaW5zKFwiY2FjaGVcIikpIHtcclxuXHRcdFx0XHR3aW5kb3cuaW5kZXhlZERCLmRlbGV0ZURhdGFiYXNlKGRiLm5hbWUpO1xyXG5cdFx0XHRcdGNvbnNvbGUubG9nKCdDYWNoZSBkZWxldGVkOicsIGRiLm5hbWUpO1xyXG5cdFx0XHR9XHJcblx0XHR9KTtcclxuXHR9XHJcblx0XHJcbn1cclxuIl0sCiAgIm1hcHBpbmdzIjogIjs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQTtBQUFBO0FBQUE7QUFBQSxzQkFBdUI7QUFRdkIsNkJBQXNDLHVCQUFPO0FBQUEsRUFHdEMsU0FBUztBQUFBO0FBQ2QsY0FBUSxJQUFJO0FBa0JaLFlBQU0sS0FBSztBQUVYLFdBQUssaUJBQWlCLE9BQU8sWUFBWSxNQUFZO0FBRXBELGNBQU0sS0FBSztBQUFBLFVBQ1QsSUFBSTtBQUFBO0FBQUE7QUFBQSxFQUdGLFdBQVc7QUFBQTtBQUNoQixjQUFRLElBQUk7QUFDWixZQUFNLEtBQUs7QUFBQTtBQUFBO0FBQUEsRUFHTixjQUFjO0FBQUE7QUFDbkIsWUFBTSxNQUFNLE1BQU0sT0FBTyxVQUFVO0FBQ25DLFVBQUksUUFBUSxRQUFNO0FBRWpCLFlBQUksR0FBRyxLQUFLLFNBQVMsVUFBVTtBQUM5QixpQkFBTyxVQUFVLGVBQWUsR0FBRztBQUNuQyxrQkFBUSxJQUFJLGtCQUFrQixHQUFHO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTsiLAogICJuYW1lcyI6IFtdCn0K
